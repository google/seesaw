// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ecu

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SeesawECUClient is the client API for SeesawECU service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeesawECUClient interface {
	// Calling Failover() on any of the LB instance triggers a switch of master.
	Failover(ctx context.Context, in *FailoverRequest, opts ...grpc.CallOption) (*FailoverResponse, error)
	// Returns SeesawStats.
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*SeesawStats, error)
	// Updates fluent-bit configuration and restarts it if needed.
	UpdateFluentBit(ctx context.Context, in *UpdateFluentBitRequest, opts ...grpc.CallOption) (*UpdateFluentBitResponse, error)
}

type seesawECUClient struct {
	cc grpc.ClientConnInterface
}

func NewSeesawECUClient(cc grpc.ClientConnInterface) SeesawECUClient {
	return &seesawECUClient{cc}
}

func (c *seesawECUClient) Failover(ctx context.Context, in *FailoverRequest, opts ...grpc.CallOption) (*FailoverResponse, error) {
	out := new(FailoverResponse)
	err := c.cc.Invoke(ctx, "/ecu.SeesawECU/Failover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seesawECUClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*SeesawStats, error) {
	out := new(SeesawStats)
	err := c.cc.Invoke(ctx, "/ecu.SeesawECU/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seesawECUClient) UpdateFluentBit(ctx context.Context, in *UpdateFluentBitRequest, opts ...grpc.CallOption) (*UpdateFluentBitResponse, error) {
	out := new(UpdateFluentBitResponse)
	err := c.cc.Invoke(ctx, "/ecu.SeesawECU/UpdateFluentBit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeesawECUServer is the server API for SeesawECU service.
// All implementations must embed UnimplementedSeesawECUServer
// for forward compatibility
type SeesawECUServer interface {
	// Calling Failover() on any of the LB instance triggers a switch of master.
	Failover(context.Context, *FailoverRequest) (*FailoverResponse, error)
	// Returns SeesawStats.
	GetStats(context.Context, *GetStatsRequest) (*SeesawStats, error)
	// Updates fluent-bit configuration and restarts it if needed.
	UpdateFluentBit(context.Context, *UpdateFluentBitRequest) (*UpdateFluentBitResponse, error)
	mustEmbedUnimplementedSeesawECUServer()
}

// UnimplementedSeesawECUServer must be embedded to have forward compatible implementations.
type UnimplementedSeesawECUServer struct {
}

func (*UnimplementedSeesawECUServer) Failover(context.Context, *FailoverRequest) (*FailoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Failover not implemented")
}
func (*UnimplementedSeesawECUServer) GetStats(context.Context, *GetStatsRequest) (*SeesawStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (*UnimplementedSeesawECUServer) UpdateFluentBit(context.Context, *UpdateFluentBitRequest) (*UpdateFluentBitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFluentBit not implemented")
}
func (*UnimplementedSeesawECUServer) mustEmbedUnimplementedSeesawECUServer() {}

func RegisterSeesawECUServer(s *grpc.Server, srv SeesawECUServer) {
	s.RegisterService(&_SeesawECU_serviceDesc, srv)
}

func _SeesawECU_Failover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeesawECUServer).Failover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecu.SeesawECU/Failover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeesawECUServer).Failover(ctx, req.(*FailoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeesawECU_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeesawECUServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecu.SeesawECU/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeesawECUServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeesawECU_UpdateFluentBit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFluentBitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeesawECUServer).UpdateFluentBit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecu.SeesawECU/UpdateFluentBit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeesawECUServer).UpdateFluentBit(ctx, req.(*UpdateFluentBitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SeesawECU_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ecu.SeesawECU",
	HandlerType: (*SeesawECUServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Failover",
			Handler:    _SeesawECU_Failover_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _SeesawECU_GetStats_Handler,
		},
		{
			MethodName: "UpdateFluentBit",
			Handler:    _SeesawECU_UpdateFluentBit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ecu.proto",
}
