// Copyright 2012 Google Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Author: angusc@google.com (Angus Cameron)

// SLB Config for Seesaw v2

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.7.1
// source: config.proto

package config

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Protocol int32

const (
	Protocol_TCP Protocol = 1
	Protocol_UDP Protocol = 2
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		1: "TCP",
		2: "UDP",
	}
	Protocol_value = map[string]int32{
		"TCP": 1,
		"UDP": 2,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[0].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[0]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Protocol) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Protocol(num)
	return nil
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

// Servicedb statuses
type Host_Status int32

const (
	Host_PRODUCTION Host_Status = 1
	Host_TESTING    Host_Status = 2
	Host_BUILDING   Host_Status = 3
	Host_STANDBY    Host_Status = 4
	Host_FAILURE    Host_Status = 5
	Host_DISABLED   Host_Status = 6
	Host_PROPOSED   Host_Status = 7
)

// Enum value maps for Host_Status.
var (
	Host_Status_name = map[int32]string{
		1: "PRODUCTION",
		2: "TESTING",
		3: "BUILDING",
		4: "STANDBY",
		5: "FAILURE",
		6: "DISABLED",
		7: "PROPOSED",
	}
	Host_Status_value = map[string]int32{
		"PRODUCTION": 1,
		"TESTING":    2,
		"BUILDING":   3,
		"STANDBY":    4,
		"FAILURE":    5,
		"DISABLED":   6,
		"PROPOSED":   7,
	}
)

func (x Host_Status) Enum() *Host_Status {
	p := new(Host_Status)
	*p = x
	return p
}

func (x Host_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Host_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[1].Descriptor()
}

func (Host_Status) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[1]
}

func (x Host_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Host_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Host_Status(num)
	return nil
}

// Deprecated: Use Host_Status.Descriptor instead.
func (Host_Status) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0, 0}
}

type Healthcheck_Type int32

const (
	Healthcheck_ICMP_PING Healthcheck_Type = 1
	Healthcheck_UDP       Healthcheck_Type = 2
	Healthcheck_TCP       Healthcheck_Type = 3
	Healthcheck_HTTP      Healthcheck_Type = 4
	Healthcheck_HTTPS     Healthcheck_Type = 5
	Healthcheck_DNS       Healthcheck_Type = 6
	Healthcheck_TCP_TLS   Healthcheck_Type = 7
	Healthcheck_RADIUS    Healthcheck_Type = 8
)

// Enum value maps for Healthcheck_Type.
var (
	Healthcheck_Type_name = map[int32]string{
		1: "ICMP_PING",
		2: "UDP",
		3: "TCP",
		4: "HTTP",
		5: "HTTPS",
		6: "DNS",
		7: "TCP_TLS",
		8: "RADIUS",
	}
	Healthcheck_Type_value = map[string]int32{
		"ICMP_PING": 1,
		"UDP":       2,
		"TCP":       3,
		"HTTP":      4,
		"HTTPS":     5,
		"DNS":       6,
		"TCP_TLS":   7,
		"RADIUS":    8,
	}
)

func (x Healthcheck_Type) Enum() *Healthcheck_Type {
	p := new(Healthcheck_Type)
	*p = x
	return p
}

func (x Healthcheck_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Healthcheck_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[2].Descriptor()
}

func (Healthcheck_Type) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[2]
}

func (x Healthcheck_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Healthcheck_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Healthcheck_Type(num)
	return nil
}

// Deprecated: Use Healthcheck_Type.Descriptor instead.
func (Healthcheck_Type) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3, 0}
}

type Healthcheck_Mode int32

const (
	Healthcheck_PLAIN Healthcheck_Mode = 1
	Healthcheck_DSR   Healthcheck_Mode = 2
)

// Enum value maps for Healthcheck_Mode.
var (
	Healthcheck_Mode_name = map[int32]string{
		1: "PLAIN",
		2: "DSR",
	}
	Healthcheck_Mode_value = map[string]int32{
		"PLAIN": 1,
		"DSR":   2,
	}
)

func (x Healthcheck_Mode) Enum() *Healthcheck_Mode {
	p := new(Healthcheck_Mode)
	*p = x
	return p
}

func (x Healthcheck_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Healthcheck_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[3].Descriptor()
}

func (Healthcheck_Mode) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[3]
}

func (x Healthcheck_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Healthcheck_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Healthcheck_Mode(num)
	return nil
}

// Deprecated: Use Healthcheck_Mode.Descriptor instead.
func (Healthcheck_Mode) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3, 1}
}

// See --scheduler in man ipvsadm(8)
type VserverEntry_Scheduler int32

const (
	VserverEntry_RR  VserverEntry_Scheduler = 1
	VserverEntry_WRR VserverEntry_Scheduler = 2
	VserverEntry_LC  VserverEntry_Scheduler = 3
	VserverEntry_WLC VserverEntry_Scheduler = 4
	VserverEntry_SH  VserverEntry_Scheduler = 5
	// NOTE: MH scheduler option is available after Kernel 4.18
	//
	// It is typically used without conntrack sync. Additional sysctl settings
	// such as `net.ipv4.vs.sloppy_tcp` is required when operating in that mode
	// to allow seamless failover.
	//
	// However, turning off conntrack sync could break other services on other
	// scheduler settings.
	//
	// Ref: https://www.kernel.org/doc/Documentation/networking/ipvs-sysctl.txt
	VserverEntry_MH VserverEntry_Scheduler = 6
)

// Enum value maps for VserverEntry_Scheduler.
var (
	VserverEntry_Scheduler_name = map[int32]string{
		1: "RR",
		2: "WRR",
		3: "LC",
		4: "WLC",
		5: "SH",
		6: "MH",
	}
	VserverEntry_Scheduler_value = map[string]int32{
		"RR":  1,
		"WRR": 2,
		"LC":  3,
		"WLC": 4,
		"SH":  5,
		"MH":  6,
	}
)

func (x VserverEntry_Scheduler) Enum() *VserverEntry_Scheduler {
	p := new(VserverEntry_Scheduler)
	*p = x
	return p
}

func (x VserverEntry_Scheduler) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VserverEntry_Scheduler) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[4].Descriptor()
}

func (VserverEntry_Scheduler) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[4]
}

func (x VserverEntry_Scheduler) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VserverEntry_Scheduler) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VserverEntry_Scheduler(num)
	return nil
}

// Deprecated: Use VserverEntry_Scheduler.Descriptor instead.
func (VserverEntry_Scheduler) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4, 0}
}

type VserverEntry_Mode int32

const (
	// See --gatewaying in man ipvsadm(8)
	VserverEntry_DSR VserverEntry_Mode = 1
	// See --masquerding in man ipvsadm(8)
	VserverEntry_NAT VserverEntry_Mode = 2
	// See --ipip in man ipvsadm(8)
	VserverEntry_TUN VserverEntry_Mode = 3
)

// Enum value maps for VserverEntry_Mode.
var (
	VserverEntry_Mode_name = map[int32]string{
		1: "DSR",
		2: "NAT",
		3: "TUN",
	}
	VserverEntry_Mode_value = map[string]int32{
		"DSR": 1,
		"NAT": 2,
		"TUN": 3,
	}
)

func (x VserverEntry_Mode) Enum() *VserverEntry_Mode {
	p := new(VserverEntry_Mode)
	*p = x
	return p
}

func (x VserverEntry_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VserverEntry_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[5].Descriptor()
}

func (VserverEntry_Mode) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[5]
}

func (x VserverEntry_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VserverEntry_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VserverEntry_Mode(num)
	return nil
}

// Deprecated: Use VserverEntry_Mode.Descriptor instead.
func (VserverEntry_Mode) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4, 1}
}

type AccessGrant_Role int32

const (
	AccessGrant_ADMIN AccessGrant_Role = 1
	AccessGrant_OPS   AccessGrant_Role = 2
)

// Enum value maps for AccessGrant_Role.
var (
	AccessGrant_Role_name = map[int32]string{
		1: "ADMIN",
		2: "OPS",
	}
	AccessGrant_Role_value = map[string]int32{
		"ADMIN": 1,
		"OPS":   2,
	}
)

func (x AccessGrant_Role) Enum() *AccessGrant_Role {
	p := new(AccessGrant_Role)
	*p = x
	return p
}

func (x AccessGrant_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessGrant_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[6].Descriptor()
}

func (AccessGrant_Role) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[6]
}

func (x AccessGrant_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AccessGrant_Role) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AccessGrant_Role(num)
	return nil
}

// Deprecated: Use AccessGrant_Role.Descriptor instead.
func (AccessGrant_Role) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5, 0}
}

type AccessGrant_Type int32

const (
	AccessGrant_USER  AccessGrant_Type = 1
	AccessGrant_GROUP AccessGrant_Type = 2
)

// Enum value maps for AccessGrant_Type.
var (
	AccessGrant_Type_name = map[int32]string{
		1: "USER",
		2: "GROUP",
	}
	AccessGrant_Type_value = map[string]int32{
		"USER":  1,
		"GROUP": 2,
	}
)

func (x AccessGrant_Type) Enum() *AccessGrant_Type {
	p := new(AccessGrant_Type)
	*p = x
	return p
}

func (x AccessGrant_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessGrant_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[7].Descriptor()
}

func (AccessGrant_Type) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[7]
}

func (x AccessGrant_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AccessGrant_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AccessGrant_Type(num)
	return nil
}

// Deprecated: Use AccessGrant_Type.Descriptor instead.
func (AccessGrant_Type) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5, 1}
}

type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fully qualified hostname
	Fqdn *string `protobuf:"bytes,1,req,name=fqdn" json:"fqdn,omitempty"`
	// An IPv4 address and prefix length in CIDR format
	Ipv4 *string `protobuf:"bytes,2,opt,name=ipv4" json:"ipv4,omitempty"`
	// An IPv6 address and prefix length in CIDR format
	Ipv6 *string `protobuf:"bytes,3,opt,name=ipv6" json:"ipv6,omitempty"`
	// Host status
	Status *Host_Status `protobuf:"varint,4,opt,name=status,enum=Host_Status" json:"status,omitempty"`
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

func (x *Host) GetFqdn() string {
	if x != nil && x.Fqdn != nil {
		return *x.Fqdn
	}
	return ""
}

func (x *Host) GetIpv4() string {
	if x != nil && x.Ipv4 != nil {
		return *x.Ipv4
	}
	return ""
}

func (x *Host) GetIpv6() string {
	if x != nil && x.Ipv6 != nil {
		return *x.Ipv6
	}
	return ""
}

func (x *Host) GetStatus() Host_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Host_PRODUCTION
}

type Backend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host   *Host  `protobuf:"bytes,1,req,name=host" json:"host,omitempty"`
	Weight *int32 `protobuf:"varint,2,opt,name=weight,def=1" json:"weight,omitempty"`
}

// Default values for Backend fields.
const (
	Default_Backend_Weight = int32(1)
)

func (x *Backend) Reset() {
	*x = Backend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backend) ProtoMessage() {}

func (x *Backend) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backend.ProtoReflect.Descriptor instead.
func (*Backend) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

func (x *Backend) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *Backend) GetWeight() int32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return Default_Backend_Weight
}

type Vlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanId *int32 `protobuf:"varint,1,req,name=vlan_id,json=vlanId" json:"vlan_id,omitempty"`
	Host   *Host  `protobuf:"bytes,2,req,name=host" json:"host,omitempty"`
}

func (x *Vlan) Reset() {
	*x = Vlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vlan) ProtoMessage() {}

func (x *Vlan) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vlan.ProtoReflect.Descriptor instead.
func (*Vlan) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

func (x *Vlan) GetVlanId() int32 {
	if x != nil && x.VlanId != nil {
		return *x.VlanId
	}
	return 0
}

func (x *Vlan) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

// TODO(angusc): Use different message types for the different healthcheck
// types.
type Healthcheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Healthcheck_Type `protobuf:"varint,1,req,name=type,enum=Healthcheck_Type" json:"type,omitempty"`
	// Healthcheck interval in seconds
	Interval *int32 `protobuf:"varint,2,opt,name=interval,def=10" json:"interval,omitempty"`
	// Healthcheck timeout in seconds
	Timeout *int32 `protobuf:"varint,3,opt,name=timeout,def=5" json:"timeout,omitempty"`
	// Healthcheck port.  For Vserver healthchecks, this field is required.
	// For VserverEntry healthchecks, it is optional and uses the VserverEntry
	// port by default.
	Port *int32 `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	// String to send for UDP/TCP/HTTP(S) healthcheck.
	Send *string `protobuf:"bytes,5,opt,name=send" json:"send,omitempty"`
	// Expected response for UDP/TCP/HTTP(S) healthcheck.
	Receive *string `protobuf:"bytes,6,opt,name=receive" json:"receive,omitempty"`
	// Expected response code for healthcheck.
	Code *int32 `protobuf:"varint,7,opt,name=code" json:"code,omitempty"`
	// The Mode of this healthcheck.
	Mode *Healthcheck_Mode `protobuf:"varint,8,opt,name=mode,enum=Healthcheck_Mode,def=1" json:"mode,omitempty"`
	// The HTTP request method to use for an HTTP(S) healthcheck.
	Method *string `protobuf:"bytes,9,opt,name=method" json:"method,omitempty"`
	// Perform a healthcheck against an HTTP proxy.
	Proxy *bool `protobuf:"varint,10,opt,name=proxy" json:"proxy,omitempty"`
	// Do TLS verification.
	TlsVerify *bool `protobuf:"varint,11,opt,name=tls_verify,json=tlsVerify,def=1" json:"tls_verify,omitempty"`
	// Number of retries before a healthcheck is considered to have failed.
	Retries *int32 `protobuf:"varint,12,opt,name=retries" json:"retries,omitempty"`
}

// Default values for Healthcheck fields.
const (
	Default_Healthcheck_Interval  = int32(10)
	Default_Healthcheck_Timeout   = int32(5)
	Default_Healthcheck_Mode      = Healthcheck_PLAIN
	Default_Healthcheck_TlsVerify = bool(true)
)

func (x *Healthcheck) Reset() {
	*x = Healthcheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Healthcheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Healthcheck) ProtoMessage() {}

func (x *Healthcheck) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Healthcheck.ProtoReflect.Descriptor instead.
func (*Healthcheck) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3}
}

func (x *Healthcheck) GetType() Healthcheck_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Healthcheck_ICMP_PING
}

func (x *Healthcheck) GetInterval() int32 {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return Default_Healthcheck_Interval
}

func (x *Healthcheck) GetTimeout() int32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return Default_Healthcheck_Timeout
}

func (x *Healthcheck) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *Healthcheck) GetSend() string {
	if x != nil && x.Send != nil {
		return *x.Send
	}
	return ""
}

func (x *Healthcheck) GetReceive() string {
	if x != nil && x.Receive != nil {
		return *x.Receive
	}
	return ""
}

func (x *Healthcheck) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *Healthcheck) GetMode() Healthcheck_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Default_Healthcheck_Mode
}

func (x *Healthcheck) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *Healthcheck) GetProxy() bool {
	if x != nil && x.Proxy != nil {
		return *x.Proxy
	}
	return false
}

func (x *Healthcheck) GetTlsVerify() bool {
	if x != nil && x.TlsVerify != nil {
		return *x.TlsVerify
	}
	return Default_Healthcheck_TlsVerify
}

func (x *Healthcheck) GetRetries() int32 {
	if x != nil && x.Retries != nil {
		return *x.Retries
	}
	return 0
}

type VserverEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol  *Protocol               `protobuf:"varint,1,req,name=protocol,enum=Protocol" json:"protocol,omitempty"`
	Port      *int32                  `protobuf:"varint,2,req,name=port" json:"port,omitempty"`
	Scheduler *VserverEntry_Scheduler `protobuf:"varint,5,opt,name=scheduler,enum=VserverEntry_Scheduler,def=4" json:"scheduler,omitempty"`
	Mode      *VserverEntry_Mode      `protobuf:"varint,6,opt,name=mode,enum=VserverEntry_Mode,def=1" json:"mode,omitempty"`
	// See --persisent in man ipvsadm(8)
	Persistence *int32 `protobuf:"varint,7,opt,name=persistence" json:"persistence,omitempty"`
	// Continue sending packets for existing connections to the same backend,
	// even when that backend is failing healthchecks.
	Quiescent *bool `protobuf:"varint,8,opt,name=quiescent" json:"quiescent,omitempty"`
	// The minimum fraction of backends that must be healthy for the vserver to be
	// active. If the number of backends falls below this watermark, the vserver
	// is considered unhealthy. Valid values are 0.0 to 1.0. If unset, the value
	// of server_high_watermark is used.
	ServerLowWatermark *float32 `protobuf:"fixed32,9,opt,name=server_low_watermark,json=serverLowWatermark" json:"server_low_watermark,omitempty"`
	// The minimum fraction of backends that must be healthy for vserver to become
	// active. Default is 0.0 .
	ServerHighWatermark *float32 `protobuf:"fixed32,10,opt,name=server_high_watermark,json=serverHighWatermark" json:"server_high_watermark,omitempty"`
	// --l-threshold per man ipvsadm(8)
	Lthreshold *int32 `protobuf:"varint,11,opt,name=lthreshold" json:"lthreshold,omitempty"`
	// --u-threshold per man ipvsadm(8)
	Uthreshold *int32 `protobuf:"varint,12,opt,name=uthreshold" json:"uthreshold,omitempty"`
	// The healthchecks to perform on the backends
	Healthcheck []*Healthcheck `protobuf:"bytes,13,rep,name=healthcheck" json:"healthcheck,omitempty"`
	// Use "one packet" load balancing
	OnePacket *bool `protobuf:"varint,14,opt,name=one_packet,json=onePacket" json:"one_packet,omitempty"`
}

// Default values for VserverEntry fields.
const (
	Default_VserverEntry_Scheduler = VserverEntry_WLC
	Default_VserverEntry_Mode      = VserverEntry_DSR
)

func (x *VserverEntry) Reset() {
	*x = VserverEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VserverEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VserverEntry) ProtoMessage() {}

func (x *VserverEntry) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VserverEntry.ProtoReflect.Descriptor instead.
func (*VserverEntry) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4}
}

func (x *VserverEntry) GetProtocol() Protocol {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return Protocol_TCP
}

func (x *VserverEntry) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *VserverEntry) GetScheduler() VserverEntry_Scheduler {
	if x != nil && x.Scheduler != nil {
		return *x.Scheduler
	}
	return Default_VserverEntry_Scheduler
}

func (x *VserverEntry) GetMode() VserverEntry_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Default_VserverEntry_Mode
}

func (x *VserverEntry) GetPersistence() int32 {
	if x != nil && x.Persistence != nil {
		return *x.Persistence
	}
	return 0
}

func (x *VserverEntry) GetQuiescent() bool {
	if x != nil && x.Quiescent != nil {
		return *x.Quiescent
	}
	return false
}

func (x *VserverEntry) GetServerLowWatermark() float32 {
	if x != nil && x.ServerLowWatermark != nil {
		return *x.ServerLowWatermark
	}
	return 0
}

func (x *VserverEntry) GetServerHighWatermark() float32 {
	if x != nil && x.ServerHighWatermark != nil {
		return *x.ServerHighWatermark
	}
	return 0
}

func (x *VserverEntry) GetLthreshold() int32 {
	if x != nil && x.Lthreshold != nil {
		return *x.Lthreshold
	}
	return 0
}

func (x *VserverEntry) GetUthreshold() int32 {
	if x != nil && x.Uthreshold != nil {
		return *x.Uthreshold
	}
	return 0
}

func (x *VserverEntry) GetHealthcheck() []*Healthcheck {
	if x != nil {
		return x.Healthcheck
	}
	return nil
}

func (x *VserverEntry) GetOnePacket() bool {
	if x != nil && x.OnePacket != nil {
		return *x.OnePacket
	}
	return false
}

type AccessGrant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user or group
	Grantee *string `protobuf:"bytes,1,req,name=grantee" json:"grantee,omitempty"`
	// The Role granted to the grantee
	Role *AccessGrant_Role `protobuf:"varint,2,req,name=role,enum=AccessGrant_Role" json:"role,omitempty"`
	// The Type of AccessGrant
	Type *AccessGrant_Type `protobuf:"varint,3,req,name=type,enum=AccessGrant_Type" json:"type,omitempty"`
}

func (x *AccessGrant) Reset() {
	*x = AccessGrant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessGrant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessGrant) ProtoMessage() {}

func (x *AccessGrant) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessGrant.ProtoReflect.Descriptor instead.
func (*AccessGrant) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5}
}

func (x *AccessGrant) GetGrantee() string {
	if x != nil && x.Grantee != nil {
		return *x.Grantee
	}
	return ""
}

func (x *AccessGrant) GetRole() AccessGrant_Role {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return AccessGrant_ADMIN
}

func (x *AccessGrant) GetType() AccessGrant_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return AccessGrant_USER
}

type Vserver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of this vserver.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// VIP hostname and IP(s).
	EntryAddress *Host `protobuf:"bytes,2,req,name=entry_address,json=entryAddress" json:"entry_address,omitempty"`
	// Contact info for Responsible Party
	Rp *string `protobuf:"bytes,3,req,name=rp" json:"rp,omitempty"`
	// Use firewall mark instead of individual service configurations.
	UseFwm       *bool           `protobuf:"varint,4,opt,name=use_fwm,json=useFwm" json:"use_fwm,omitempty"`
	VserverEntry []*VserverEntry `protobuf:"bytes,5,rep,name=vserver_entry,json=vserverEntry" json:"vserver_entry,omitempty"`
	// The healthchecks to perform on the backends, in addition to those that are
	// VserverEntry specific.
	Healthcheck []*Healthcheck `protobuf:"bytes,7,rep,name=healthcheck" json:"healthcheck,omitempty"`
	// The access grants for this vserver.
	AccessGrant []*AccessGrant `protobuf:"bytes,8,rep,name=access_grant,json=accessGrant" json:"access_grant,omitempty"`
	// Warning messages about this Vserver (such as misconfigured backends) to be
	// displayed on operator consoles.
	Warning []string `protobuf:"bytes,9,rep,name=warning" json:"warning,omitempty"`
	// The list of backends for this vserver.
	Backend []*Backend `protobuf:"bytes,10,rep,name=backend" json:"backend,omitempty"`
}

func (x *Vserver) Reset() {
	*x = Vserver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vserver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vserver) ProtoMessage() {}

func (x *Vserver) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vserver.ProtoReflect.Descriptor instead.
func (*Vserver) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{6}
}

func (x *Vserver) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Vserver) GetEntryAddress() *Host {
	if x != nil {
		return x.EntryAddress
	}
	return nil
}

func (x *Vserver) GetRp() string {
	if x != nil && x.Rp != nil {
		return *x.Rp
	}
	return ""
}

func (x *Vserver) GetUseFwm() bool {
	if x != nil && x.UseFwm != nil {
		return *x.UseFwm
	}
	return false
}

func (x *Vserver) GetVserverEntry() []*VserverEntry {
	if x != nil {
		return x.VserverEntry
	}
	return nil
}

func (x *Vserver) GetHealthcheck() []*Healthcheck {
	if x != nil {
		return x.Healthcheck
	}
	return nil
}

func (x *Vserver) GetAccessGrant() []*AccessGrant {
	if x != nil {
		return x.AccessGrant
	}
	return nil
}

func (x *Vserver) GetWarning() []string {
	if x != nil {
		return x.Warning
	}
	return nil
}

func (x *Vserver) GetBackend() []*Backend {
	if x != nil {
		return x.Backend
	}
	return nil
}

type MisconfiguredVserver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	ErrorMessage *string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (x *MisconfiguredVserver) Reset() {
	*x = MisconfiguredVserver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MisconfiguredVserver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MisconfiguredVserver) ProtoMessage() {}

func (x *MisconfiguredVserver) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MisconfiguredVserver.ProtoReflect.Descriptor instead.
func (*MisconfiguredVserver) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{7}
}

func (x *MisconfiguredVserver) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MisconfiguredVserver) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{8}
}

func (x *Attribute) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Attribute) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UNIX timestamp at which the Cluster configuration was last updated.
	LastUpdated *int64 `protobuf:"varint,1,req,name=last_updated,json=lastUpdated" json:"last_updated,omitempty"`
	// Miscellaneous details about the Cluster configuration (info on upstream
	// source data, etc) go here.
	Attribute []*Attribute `protobuf:"bytes,2,rep,name=attribute" json:"attribute,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{9}
}

func (x *Metadata) GetLastUpdated() int64 {
	if x != nil && x.LastUpdated != nil {
		return *x.LastUpdated
	}
	return 0
}

func (x *Metadata) GetAttribute() []*Attribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeesawVip *Host   `protobuf:"bytes,1,req,name=seesaw_vip,json=seesawVip" json:"seesaw_vip,omitempty"`
	Node      []*Host `protobuf:"bytes,2,rep,name=node" json:"node,omitempty"`
	Vmac      *string `protobuf:"bytes,3,opt,name=vmac,def=00:00:5E:00:01:01" json:"vmac,omitempty"`
	// The local ASN for BGP peering.
	BgpLocalAsn *uint32 `protobuf:"varint,4,opt,name=bgp_local_asn,json=bgpLocalAsn,def=64512" json:"bgp_local_asn,omitempty"`
	// The remote ASN for BGP peering.  If unset, BGP will not be used.
	BgpRemoteAsn *uint32 `protobuf:"varint,5,opt,name=bgp_remote_asn,json=bgpRemoteAsn" json:"bgp_remote_asn,omitempty"`
	// The BGP peers.  If empty, BGP will not be used.
	BgpPeer []*Host `protobuf:"bytes,6,rep,name=bgp_peer,json=bgpPeer" json:"bgp_peer,omitempty"`
	// The service VIPs hosted by this cluster, excluding those that are
	// misconfigured (see the misconfigured_vserver attribute).
	Vserver []*Vserver `protobuf:"bytes,7,rep,name=vserver" json:"vserver,omitempty"`
	Vlan    []*Vlan    `protobuf:"bytes,8,rep,name=vlan" json:"vlan,omitempty"`
	// The list of vservers that have broken configurations.
	MisconfiguredVserver []*MisconfiguredVserver `protobuf:"bytes,9,rep,name=misconfigured_vserver,json=misconfiguredVserver" json:"misconfigured_vserver,omitempty"`
	// Metadata about this Cluster configuration.
	Metadata *Metadata `protobuf:"bytes,10,opt,name=metadata" json:"metadata,omitempty"`
	// The dedicated VIP subnet(s) for this cluster, in CIDR notation.
	DedicatedVipSubnet []string `protobuf:"bytes,11,rep,name=dedicated_vip_subnet,json=dedicatedVipSubnet" json:"dedicated_vip_subnet,omitempty"`
}

// Default values for Cluster fields.
const (
	Default_Cluster_Vmac        = string("00:00:5E:00:01:01")
	Default_Cluster_BgpLocalAsn = uint32(64512)
)

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{10}
}

func (x *Cluster) GetSeesawVip() *Host {
	if x != nil {
		return x.SeesawVip
	}
	return nil
}

func (x *Cluster) GetNode() []*Host {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *Cluster) GetVmac() string {
	if x != nil && x.Vmac != nil {
		return *x.Vmac
	}
	return Default_Cluster_Vmac
}

func (x *Cluster) GetBgpLocalAsn() uint32 {
	if x != nil && x.BgpLocalAsn != nil {
		return *x.BgpLocalAsn
	}
	return Default_Cluster_BgpLocalAsn
}

func (x *Cluster) GetBgpRemoteAsn() uint32 {
	if x != nil && x.BgpRemoteAsn != nil {
		return *x.BgpRemoteAsn
	}
	return 0
}

func (x *Cluster) GetBgpPeer() []*Host {
	if x != nil {
		return x.BgpPeer
	}
	return nil
}

func (x *Cluster) GetVserver() []*Vserver {
	if x != nil {
		return x.Vserver
	}
	return nil
}

func (x *Cluster) GetVlan() []*Vlan {
	if x != nil {
		return x.Vlan
	}
	return nil
}

func (x *Cluster) GetMisconfiguredVserver() []*MisconfiguredVserver {
	if x != nil {
		return x.MisconfiguredVserver
	}
	return nil
}

func (x *Cluster) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Cluster) GetDedicatedVipSubnet() []string {
	if x != nil {
		return x.DedicatedVipSubnet
	}
	return nil
}

var File_config_proto protoreflect.FileDescriptor

var file_config_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3,
	0x01, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x70, 0x76, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x70, 0x76, 0x36, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x69, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53,
	0x45, 0x44, 0x10, 0x07, 0x22, 0x3f, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12,
	0x19, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3a, 0x0a, 0x04, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x22, 0xde, 0x03, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x31, 0x30, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x35, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x05, 0x50, 0x4c,
	0x41, 0x49, 0x4e, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x09, 0x74, 0x6c, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x55, 0x44, 0x50, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x54, 0x54,
	0x50, 0x53, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4e, 0x53, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x54, 0x43, 0x50, 0x5f, 0x54, 0x4c, 0x53, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41,
	0x44, 0x49, 0x55, 0x53, 0x10, 0x08, 0x22, 0x1a, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x53, 0x52,
	0x10, 0x02, 0x22, 0xc9, 0x04, 0x0a, 0x0c, 0x56, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3a,
	0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x56, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x3a, 0x03, 0x57, 0x4c, 0x43, 0x52,
	0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x56, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x03, 0x44, 0x53,
	0x52, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x69,
	0x65, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x71, 0x75,
	0x69, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x77,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a,
	0x0a, 0x6c, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6c, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x75, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2e, 0x0a,
	0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x3d, 0x0a, 0x09,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x52, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x52, 0x52, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x43,
	0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x4c, 0x43, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x53,
	0x48, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x48, 0x10, 0x06, 0x22, 0x21, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x53, 0x52, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x4e, 0x41, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x55, 0x4e, 0x10, 0x03, 0x22, 0xae,
	0x01, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x1a, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x50, 0x53,
	0x10, 0x02, 0x22, 0x1b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x22,
	0xdb, 0x02, 0x0a, 0x07, 0x56, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x0c, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x72,
	0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x72, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x5f, 0x66, 0x77, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x46, 0x77, 0x6d, 0x12, 0x32, 0x0a, 0x0d, 0x76, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x56, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x76, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0b, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x07,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x52, 0x0e, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x22, 0x4f, 0x0a,
	0x14, 0x4d, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x56, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x35,
	0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x57, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0xc8,
	0x03, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0a, 0x73, 0x65,
	0x65, 0x73, 0x61, 0x77, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x09, 0x73, 0x65, 0x65, 0x73, 0x61, 0x77, 0x56, 0x69, 0x70,
	0x12, 0x19, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x76,
	0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x11, 0x30, 0x30, 0x3a, 0x30, 0x30,
	0x3a, 0x35, 0x45, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x31, 0x3a, 0x30, 0x31, 0x52, 0x04, 0x76, 0x6d,
	0x61, 0x63, 0x12, 0x29, 0x0a, 0x0d, 0x62, 0x67, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x61, 0x73, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x05, 0x36, 0x34, 0x35, 0x31, 0x32,
	0x52, 0x0b, 0x62, 0x67, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x6e, 0x12, 0x24, 0x0a,
	0x0e, 0x62, 0x67, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x67, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x73, 0x6e, 0x12, 0x20, 0x0a, 0x08, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x07, 0x62, 0x67,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x76, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x56, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x07, 0x76, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x04, 0x76, 0x6c, 0x61,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x04,
	0x76, 0x6c, 0x61, 0x6e, 0x12, 0x4a, 0x0a, 0x15, 0x6d, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x64, 0x56, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x14, 0x6d, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x56, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x70, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x56, 0x69, 0x70, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2a, 0x1c, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x02, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x65,
	0x73, 0x61, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
}

var (
	file_config_proto_rawDescOnce sync.Once
	file_config_proto_rawDescData = file_config_proto_rawDesc
)

func file_config_proto_rawDescGZIP() []byte {
	file_config_proto_rawDescOnce.Do(func() {
		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_proto_rawDescData)
	})
	return file_config_proto_rawDescData
}

var file_config_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_config_proto_goTypes = []interface{}{
	(Protocol)(0),                // 0: Protocol
	(Host_Status)(0),             // 1: Host.Status
	(Healthcheck_Type)(0),        // 2: Healthcheck.Type
	(Healthcheck_Mode)(0),        // 3: Healthcheck.Mode
	(VserverEntry_Scheduler)(0),  // 4: VserverEntry.Scheduler
	(VserverEntry_Mode)(0),       // 5: VserverEntry.Mode
	(AccessGrant_Role)(0),        // 6: AccessGrant.Role
	(AccessGrant_Type)(0),        // 7: AccessGrant.Type
	(*Host)(nil),                 // 8: Host
	(*Backend)(nil),              // 9: Backend
	(*Vlan)(nil),                 // 10: Vlan
	(*Healthcheck)(nil),          // 11: Healthcheck
	(*VserverEntry)(nil),         // 12: VserverEntry
	(*AccessGrant)(nil),          // 13: AccessGrant
	(*Vserver)(nil),              // 14: Vserver
	(*MisconfiguredVserver)(nil), // 15: MisconfiguredVserver
	(*Attribute)(nil),            // 16: Attribute
	(*Metadata)(nil),             // 17: Metadata
	(*Cluster)(nil),              // 18: Cluster
}
var file_config_proto_depIdxs = []int32{
	1,  // 0: Host.status:type_name -> Host.Status
	8,  // 1: Backend.host:type_name -> Host
	8,  // 2: Vlan.host:type_name -> Host
	2,  // 3: Healthcheck.type:type_name -> Healthcheck.Type
	3,  // 4: Healthcheck.mode:type_name -> Healthcheck.Mode
	0,  // 5: VserverEntry.protocol:type_name -> Protocol
	4,  // 6: VserverEntry.scheduler:type_name -> VserverEntry.Scheduler
	5,  // 7: VserverEntry.mode:type_name -> VserverEntry.Mode
	11, // 8: VserverEntry.healthcheck:type_name -> Healthcheck
	6,  // 9: AccessGrant.role:type_name -> AccessGrant.Role
	7,  // 10: AccessGrant.type:type_name -> AccessGrant.Type
	8,  // 11: Vserver.entry_address:type_name -> Host
	12, // 12: Vserver.vserver_entry:type_name -> VserverEntry
	11, // 13: Vserver.healthcheck:type_name -> Healthcheck
	13, // 14: Vserver.access_grant:type_name -> AccessGrant
	9,  // 15: Vserver.backend:type_name -> Backend
	16, // 16: Metadata.attribute:type_name -> Attribute
	8,  // 17: Cluster.seesaw_vip:type_name -> Host
	8,  // 18: Cluster.node:type_name -> Host
	8,  // 19: Cluster.bgp_peer:type_name -> Host
	14, // 20: Cluster.vserver:type_name -> Vserver
	10, // 21: Cluster.vlan:type_name -> Vlan
	15, // 22: Cluster.misconfigured_vserver:type_name -> MisconfiguredVserver
	17, // 23: Cluster.metadata:type_name -> Metadata
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_config_proto_init() }
func file_config_proto_init() {
	if File_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Healthcheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VserverEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessGrant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vserver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MisconfiguredVserver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_proto_goTypes,
		DependencyIndexes: file_config_proto_depIdxs,
		EnumInfos:         file_config_proto_enumTypes,
		MessageInfos:      file_config_proto_msgTypes,
	}.Build()
	File_config_proto = out.File
	file_config_proto_rawDesc = nil
	file_config_proto_goTypes = nil
	file_config_proto_depIdxs = nil
}
